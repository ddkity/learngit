安装完成了git之后，需要进行最后一步的设置：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
*********************************************************
	git在本地上的操作
*********************************************************
1、初始化仓库
	git init
2、把文件添加到仓库
	git add
3、把文件提交到仓库
	git commit
4、查看仓库的当前状态
	git status
5、查看当前工作区和已经提交的有什么不同
	git diff
6、查看git的提交（commit）记录，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数（git log --pretty=oneline）
	git log
7、版本回退方法：在git当中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。回退版本的命令是：git reset --hard
	回退上一个版本：git reset --hard HEAD^
	回退上上一个版本：git reset --hard HEAD^^
	回退上100个版本：git reset --hard HEAD~100
	回退到某个commit id的版本：git reset --hard d55a3a77
8、在使用git reset的命令中退回到了比较旧的版本了，现在又想回到比较新的版本，但是又不记得新的commit id怎么办？使用git reflog命令，这个命令用来记录每一次的commit信息，可以查看到commit id。找到id之后就可以使用：git reset --hard + [commit id]来回退到指定的版本了。

9、git撤销修改的方法：git checkout -- readme
	意思就是，把readme文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	另一种是readme已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态（即是回到git add之前的状态，此时的readme已经修改过了，和上次的commit的内容还是不一样的，可以再次的add和commit）。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。

	git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。

10、删除文件，有两种情况：
	1、你真的是要把text.txt文件删除。此时你已经把一个text.txt文件add并commit了，你在本地删除text.txt文件之后，再使用git rm text.txt,然后git commit，就能把text.txt文件彻底的删除了。
	2、其实你是不想删除text.txt这个文件的，那么使用git checkout -- test.txt，其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。但是要小心，这个操作你只能恢复文件到版本库中最新版本，你会丢失最近一次提交后你修改的内容。



*********************************************************
	git远程仓库操作
*********************************************************
1、如果要连接到远程仓库，需要获取SSH KEY，创建ssh key的方法如下:创建的key在用户主目录下的.ssh目录，有两个文件id_rsa和id_rsa.pub。
	ssh-keygen -t rsa -C "youremail@example.com"，你需要把邮件地址换成你自己本地的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。（如果是Windows下打开Git Bash这个软件进入命令行模式）。

2、登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，然后点“Add Key”，你就应该看到已经添加的Key。

3、情形1：我现在已经在本地创建了git仓库，需要在github上创建一个仓库并进行远程的同步。
	首先登录github，找到“new repository”，点击并填入需要创建的仓库名字，创建一个空的仓库。然后执行以下两条指令使本地仓库和远程仓库关联：
	git remote add origin git@github.com:ddkity/learngit.git
	git push -u origin master（首次使用这个指令需要加-u，以后再push的时候就不需要加-u了）
	SSH警告
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。

4、情形2：现在本地上是没有本地的仓库的，是创建一个新的工程，那么可以先创建远程仓库，然后从远程仓库克隆到本地，再在本地添加文件。
	登录github，创建一个远程仓库，创建的时候勾选我们勾选“Initialize this repository with a README”，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件（情形1的情况是不需要勾选的）。远程仓库准备好了之后，下一步是克隆一个本地的仓库。
	git clone git@github.com:ddkity/Roomba1.4.3.git
	接下来就可以往本地的仓库添加文件啊，工程啊之类的东西然后推送到远程仓库了

5、.gitignore文件的设置，这个文件需要放在与.git目录同级下，然后设置忽略的文件的规则，忽略目录为：（例如）SI/。另外如果需要添加目录下所有的文件可以使用git add -A


*********************************************************
	git分支管理
*********************************************************
1、创建分支然后切换到创建的分支
	git checkout -b mydev,此命令相当于以下两条命令：
	git branch mydev
	git checkout mydev
2、使用git branch命令查看目前有多少分支，目前工作区处于哪个分支，当前分支前面会标一个*号
3、切换回主分支：git checkout master
4、把mydev分支合并到主分支：git merge mydev	(这种方法使用的是Fast forward模式，在这种模式下删除分支后就会丢掉分支信息，以后就看不到什么时候有分支的合并。所以可以使用禁止Fast forward的模式，git就会在merge的同时新生成一个commit，使用方法：git merge --no-ff -m "这里是提交的内容说明" mydev)
5、删除分支：git branch -d mydev

6、分支冲突：在分支上修改内容并add和commit之后，把分支切换到master上，然后同样的add和commit后，提交当分支上的同一个文件的内容与主分支上的内容不一样的时候，合并分支会产生冲突而导致无法合并。这个时候，需要手动修改有冲突的文件，然后在master上重新的add和commit之后再进行合并（git merge mydev）。
	另外，使用git log --graph命令可以看到分支合并图。


7、假如A电脑上创建了dev1分支，修改了文件并add、commit和push了，那么远程主机上面的代码应该是最新的了。然后在A电脑push前同时在B电脑上已经创建了dev2分支，然后B电脑也依次add、commit和push，此时push的时候就会报错：{To git@github.com:ddkity/testgit.git
 ! [rejected]        master -> master (fetch first)
error: 无法推送一些引用到 'git@github.com:ddkity/testgit.git'
提示：更新被拒绝，因为远程仓库包含您本地尚不存在的提交。这通常是因为另外
提示：一个仓库已向该引用进行了推送。再次推送前，您可能需要先整合远程变更
提示：（如 'git pull ...'）。
提示：详见 'git push --help' 中的 'Note about fast-forwards' 小节。}，原因是：您的分支领先 'origin/master' 共 1 个提交。所以要在B电脑上push代码，必须先要pull远程的仓库。git pull origin master。然后由于A电脑和B电脑修改的是同一个文件，会有导致合并冲突：{remote: Counting objects: 3, done.
remote: Compressing objects: 100% (1/1), done.
remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0
Unpacking objects: 100% (3/3), done.
来自 github.com:ddkity/testgit
 * branch            master     -> FETCH_HEAD
   2b0de44..99979c1  master     -> origin/master
自动合并 testgitmerga.txt
冲突（内容）：合并冲突于 testgitmerga.txt
自动合并失败，修正冲突然后提交修正的结果。}，此时就应该根据提示打开冲突的文件，冲突文件显示格式如下，{<<<<<<< HEAD
5、这是在ubuntu下的mydev3分支

=======
5、这是在windows下的mydev2分支
>>>>>>> 99979c1a63e9b9d4034a6a7a52b1f42054d6c765}，修改冲突为，可以修改例如这样的：{5、这是在ubuntu下的mydev3分支
5、这是在windows下的mydev2分支}，然后再add、commit和push。

*********************************************************
	git bug分支管理
*********************************************************
1、这种情况是在代码的开发中，发现master上有bug，但是目前我正在mydev分支上进行代码开发。我不能再在master分支上创建一个临时的分支修改了再合并，因为这样可能会导致到时候合并mydev分支的时候有冲突。正确做法应该是先把当前的工作现场mydev储藏(stash)起来，然后再在master上创建临时分支然后修改bug再合并到master上。之后就可以恢复储藏的现场继续mydev上的工作了。
	1、目前你正在dev的分支上面工作，突然发现master上面有bug，首先进行储藏当前现场：git stash，此时git status查看状态是干净的。然后赶紧切换回来到master上，在master上查看git status也是干净的。
	2、在master上创建一个临时的分支：git checkout -b issue-01,
	3、在issue-01上修复bug。
	4、然后add、commit、merge。
		git add testgitmerga.txt
		git commit -m "添加测试修复的bug"
		git checkout master
		git merge --no-ff -m "和bug分支进行合 并" issue-01
		git branch -d issue-01
	5、切换回dev分支继续工作：
		git checkout dev
		git stash list(查看工作现场)
		git stash pop（恢复的同时把stash内容也删了，或者git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除）
		也可以使用git status进行多次隐藏工作现场，然后使用git stash list查看有多少个隐藏的现场，然后使用git stash apply stash@{0}指定恢复到哪一个现场。最后使用git stash drop命令来删除不需要的现场


2、feature分支：用于当创建了一个分支了，并开发完成了分支进行add和commit了。下一步合并分支即可大工告成。但是现在突然不想合并了，必须要销毁分支，使用git branch -D feature-vulcan
	git checkout -b feature-vulcan（创建分支并进入）
	git add vulcan.py（添加分支）
	git commit -m "add feature vulcan"（提交分支）
	git checkout dev（切换回到父分支）
	git branch -d feature-vulcan（销毁分支，提示这个分支没有合并，不能销毁。）
	git branch -D feature-vulcan（需要使用-D的参数来销毁）

3、查看远程仓库的信息：
	git remote -v

4、推送分支到远程仓库：
	推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
	$ git push origin master
	如果要推送其他分支，比如dev，就改成：
	$ git push origin dev
	但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
	master分支是主分支，因此要时刻与远程同步；
	dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
	bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
	feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
	总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！

5、多人协作：A电脑在本地创建了分支并add、commit、push到了远程仓库：git push origin dev4，此时远程仓库是有两个分支的（master和dev4）。B电脑clone这个工程，git clone git@github.com:ddkity/testgit.git，默认情况下，克隆的这个工程只有master分支，并不会看到dev4的分支。现在B电脑要在dev4上开发，就必须创建远程origin的dev4分支到本地：git checkout -b dev4 origin/dev4。
现在，B电脑就可以在dev4上继续修改，然后，时不时地把dev4分支push到远程，
	git add env.txt
	git commit -m "add env"
	git push origin dev4

此时A电脑也要修改Dev4的文件并push到远程仓库，
	git add env.txt
	git commit -m "add new env"
	git push origin dev（推送失败，提示有冲突）
	此时需要先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送。
	如果git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
	$ git branch --set-upstream-to=origin/dev4 dev4
	最后再git pull成功

*********************************************************
	git bug分支管理
*********************************************************
1、切换到对应的分支，然后创建标签：git tag <name>（这个标签默认打在最新的commit上的），也可以打到某一次的commit上，但是需要知道那次的commit id，比如：git tag v0.9 f52c633（第三个参数的标签名，第四个参数是commit id）。
	使用git tag可以查看有多少个标签。
	使用git show <tagname>可以查看某个标签的信息。
	还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
	$ git tag -a v0.1 -m "version 0.1 released" 1094adb

	使用git tag -d v0.1删除标签
	推送某个标签到远程：git push origin <tagname>
	推送所有标签到远程：git push origin --tags
	如果需要删除远程的标签：先删除本地标签：git tag -d v0.9，然后删除远程的：git push origin :refs/tags/v0.9


