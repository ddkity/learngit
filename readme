安装完成了git之后，需要进行最后一步的设置：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
*********************************************************
	git在本地上的操作
*********************************************************
1、初始化仓库
	git init
2、把文件添加到仓库
	git add
3、把文件提交到仓库
	git commit
4、查看仓库的当前状态
	git status
5、查看当前工作区和已经提交的有什么不同
	git diff
6、查看git的提交（commit）记录，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数（git log --pretty=oneline）
	git log
7、版本回退方法：在git当中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。回退版本的命令是：git reset --hard
	回退上一个版本：git reset --hard HEAD^
	回退上上一个版本：git reset --hard HEAD^^
	回退上100个版本：git reset --hard HEAD~100
	回退到某个commit id的版本：git reset --hard d55a3a77
8、在使用git reset的命令中退回到了比较旧的版本了，现在又想回到比较新的版本，但是又不记得新的commit id怎么办？使用git reflog命令，这个命令用来记录每一次的commit信息，可以查看到commit id。找到id之后就可以使用：git reset --hard + [commit id]来回退到指定的版本了。

9、git撤销修改的方法：git checkout -- readme
	意思就是，把readme文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	另一种是readme已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态（即是回到git add之前的状态，此时的readme已经修改过了，和上次的commit的内容还是不一样的，可以再次的add和commit）。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。

	git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。

10、删除文件，有两种情况：
	1、你真的是要把text.txt文件删除。此时你已经把一个text.txt文件add并commit了，你在本地删除text.txt文件之后，再使用git rm text.txt,然后git commit，就能把text.txt文件彻底的删除了。
	2、其实你是不想删除text.txt这个文件的，那么使用git checkout -- test.txt，其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。但是要小心，这个操作你只能恢复文件到版本库中最新版本，你会丢失最近一次提交后你修改的内容。



*********************************************************
	git远程仓库操作
*********************************************************
1、如果要连接到远程仓库，需要获取SSH KEY，创建ssh key的方法如下:创建的key在用户主目录下的.ssh目录，有两个文件id_rsa和id_rsa.pub。
	ssh-keygen -t rsa -C "youremail@example.com"，你需要把邮件地址换成你自己本地的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。（如果是Windows下打开Git Bash这个软件进入命令行模式）。

2、登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，然后点“Add Key”，你就应该看到已经添加的Key。

3、情形1：我现在已经在本地创建了git仓库，需要在github上创建一个仓库并进行远程的同步。
	首先登录github，找到“new repository”，点击并填入需要创建的仓库名字，创建一个空的仓库。然后执行以下两条指令使本地仓库和远程仓库关联：
	git remote add origin git@github.com:ddkity/learngit.git
	git push -u origin master（首次使用这个指令需要加-u，以后再push的时候就不需要加-u了）
	SSH警告
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。

4、情形2：现在本地上是没有本地的仓库的，是创建一个新的工程，那么可以先创建远程仓库，然后从远程仓库克隆到本地，再在本地添加文件。
	登录github，创建一个远程仓库，创建的时候勾选我们勾选“Initialize this repository with a README”，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件（情形1的情况是不需要勾选的）。远程仓库准备好了之后，下一步是克隆一个本地的仓库。
	git clone git@github.com:ddkity/Roomba1.4.3.git
	接下来就可以往本地的仓库添加文件啊，工程啊之类的东西然后推送到远程仓库了

5、.gitignore文件的设置，这个文件需要放在与.git目录同级下，然后设置忽略的文件的规则，忽略目录为：（例如）SI/。另外如果需要添加目录下所有的文件可以使用git add -A


*********************************************************
	git分支管理
*********************************************************
1、创建分支然后切换到创建的分支
	git checkout -b mydev,此命令相当于以下两条命令：
	git branch mydev
	git checkout mydev
2、使用git branch命令查看目前有多少分支，目前工作区处于哪个分支，当前分支前面会标一个*号
3、切换回主分支：git checkout master
4、把mydev分支合并到主分支：git merge mydev
5、删除分支：git branch -d mydev

测试分支和测试分支


